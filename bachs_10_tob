---
title: "test"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

BAHCS-10 total scores 
Get Tobacco scores
Change tobacco scores
```{r}
setwd("T:/CRI_Research/telehealth_evaluation/CCHBC_big_picture/social_determinants_of_health_docs/Data")
bachs_10 = read.csv("Health Home - HCS - Qlikview.csv", header= TRUE)
bachs_10 = bachs_10[c("Universal.Client.ID", "HCS.Assessment.Date", "HCS.Total.Score", "Client.Model.Time.Point")]
tobacco = read.csv("Health Home - Tobacco - Qlikview.csv", header = TRUE)
tobacco = tobacco[c("Universal.Client.ID", "Tobacco.Screen.Date", "Client.Model.Time.Point", "Uses.Tobacco")]
tobacco$Uses.Tobacco = ifelse(tobacco$Uses.Tobacco == "Yes", 1, 0)

```
Merge both data sets
Go ahead and remove missing data, because there is only missing data two on the two variables so it is the same pairwise deletion.
```{r}
library(lubridate)
library(prettyR)
bachs_10_tob = merge(bachs_10, tobacco, by = "Universal.Client.ID", all.y = TRUE)
dim(bachs_10_tob)
describe.factor(bachs_10_tob$HCS.Total.Score)
library(naniar)
miss_var_summary(bachs_10_tob)
bachs_10_tob_complete = na.omit(bachs_10_tob)
bachs_10_tob_complete$HCS.Assessment.Date = ymd(bachs_10_tob_complete$HCS.Assessment.Date)
bachs_10_tob_complete$Tobacco.Screen.Date = ymd(bachs_10_tob_complete$Tobacco.Screen.Date)
bachs_10_tob_complete
## Order by ID and HCS assessment date
bachs_10_tob_complete = bachs_10_tob_complete[order(bachs_10_tob_complete$Universal.Client.ID, bachs_10_tob_complete$HCS.Assessment.Date),]
bachs_10_tob_complete

```
Identify and remove duplicates
The dates for tobacco screening and timepoints do not align with HCS dates.  There are several years differences.
Create a new ID with universal id and HCS date and same for tob date
```{r}
library(dplyr)
bachs_10_tob_complete$id_HCS_date = paste0(bachs_10_tob_complete$Universal.Client.ID, bachs_10_tob_complete$HCS.Assessment.Date)
bachs_10_tob_complete = distinct(bachs_10_tob_complete, id_HCS_date, .keep_all = TRUE)
bachs_10_tob_complete$id_tob_date = paste0(bachs_10_tob_complete$Universal.Client.ID, bachs_10_tob_complete$Tobacco.Screen.Date)
bachs_10_tob_complete = distinct(bachs_10_tob_complete, id_tob_date, .keep_all = TRUE)
describe.factor(bachs_10_tob_complete$Client.Model.Time.Point.x)
```



Let's create an intake and 6-month data sets
```{r}
bachs_10_tob_complete_intake = subset(bachs_10_tob_complete, Client.Model.Time.Point.x == "Intake" & Client.Model.Time.Point.y == "Intake")

### Let's get predictive validity at 6months
bachs_10_tob_complete_intake_hcs_6_months_tob = subset(bachs_10_tob_complete, Client.Model.Time.Point.x == "Intake" & Client.Model.Time.Point.y == "6 Month")
dim(bachs_10_tob_complete_intake_hcs_6_months_tob)
bachs_10_tob_complete_intake_hcs_6_months_tob

### Let's get predictive validity at 3months
bachs_10_tob_complete_intake_hcs_3_months_tob = subset(bachs_10_tob_complete, Client.Model.Time.Point.x == "Intake" & Client.Model.Time.Point.y == "3 Month")
dim(bachs_10_tob_complete_intake_hcs_3_months_tob)
bachs_10_tob_complete_intake_hcs_3_months_tob


```
Quick descirptives
```{r}

describe.factor(bachs_10_tob_complete_intake$Uses.Tobacco)
dim(bachs_10_tob_complete_intake)[1]
mean(bachs_10_tob_complete_intake$HCS.Total.Score)
sd(bachs_10_tob_complete_intake$HCS.Total.Score)
library(descr)
compmeans(bachs_10_tob_complete_intake$HCS.Total.Score, bachs_10_tob_complete_intake$Uses.Tobacco)

### 6-months
describe.factor(bachs_10_tob_complete_intake_hcs_6_months_tob$Uses.Tobacco)
dim(bachs_10_tob_complete_intake_hcs_6_months_tob)[1]
mean(bachs_10_tob_complete_intake_hcs_6_months_tob$HCS.Total.Score)
sd(bachs_10_tob_complete_intake_hcs_6_months_tob$HCS.Total.Score)
compmeans(bachs_10_tob_complete_intake_hcs_6_months_tob$HCS.Total.Score, bachs_10_tob_complete_intake_hcs_6_months_tob$Uses.Tobacco)

#3-months
### 6-months
describe.factor(bachs_10_tob_complete_intake_hcs_3_months_tob$Uses.Tobacco)
dim(bachs_10_tob_complete_intake_hcs_3_months_tob)[1]
mean(bachs_10_tob_complete_intake_hcs_3_months_tob$HCS.Total.Score)
sd(bachs_10_tob_complete_intake_hcs_3_months_tob$HCS.Total.Score)
compmeans(bachs_10_tob_complete_intake_hcs_3_months_tob$HCS.Total.Score, bachs_10_tob_complete_intake_hcs_3_months_tob$Uses.Tobacco)

```



Point biserial with tobacco and hcs at intake and intake and 6-months
```{r}
library(ltm)
library(polycor)

#Intake
hist(bachs_10_tob_complete_intake$HCS.Total.Score)
qqnorm(bachs_10_tob_complete_intake$HCS.Total.Score)
polyserial(bachs_10_tob_complete_intake$HCS.Total.Score, bachs_10_tob_complete_intake$Uses.Tobacco)
cor.test(bachs_10_tob_complete_intake$HCS.Total.Score, bachs_10_tob_complete_intake$Uses.Tobacco, alternative = "less")

#6-months
hist(bachs_10_tob_complete_intake_hcs_6_months_tob$HCS.Total.Score)
qqnorm(bachs_10_tob_complete_intake_hcs_6_months_tob$HCS.Total.Score)

polyserial(bachs_10_tob_complete_intake_hcs_6_months_tob$HCS.Total.Score, bachs_10_tob_complete_intake_hcs_6_months_tob$Uses.Tobacco)

cor.test(bachs_10_tob_complete_intake_hcs_6_months_tob$HCS.Total.Score, bachs_10_tob_complete_intake_hcs_6_months_tob$Uses.Tobacco)

#3-months
hist(bachs_10_tob_complete_intake_hcs_3_months_tob$HCS.Total.Score)
qqnorm(bachs_10_tob_complete_intake_hcs_3_months_tob$HCS.Total.Score)

polyserial(bachs_10_tob_complete_intake_hcs_3_months_tob$HCS.Total.Score, bachs_10_tob_complete_intake_hcs_3_months_tob$Uses.Tobacco)

cor.test(bachs_10_tob_complete_intake_hcs_3_months_tob$HCS.Total.Score, bachs_10_tob_complete_intake_hcs_3_months_tob$Uses.Tobacco)
```
Let's try HCS and utilization
Let's try intake and relationship between inpatient and ER visits
I don't know which intakes are associated with which follow ups to create an episode of care.
```{r}
setwd("T:/CRI_Research/telehealth_evaluation/CCHBC_big_picture/social_determinants_of_health_docs/Data")
hcs_healthcare = read.csv("Healthlink - HCS - Redcap.csv", header =TRUE)
#Client.ID, Record.ID, Assessment.Date, Time.point, My.Score
healthcare =  hcs_healthcare[,20:22]
names(healthcare) = c("days_inpatient_medical", "days_inpatient_psychiatric", "er_visits")
hcs_healthcare = hcs_healthcare[c("Client.ID", "Record.ID", "Assessment.Date", "Time.point", "My.Score.")]
hcs_healthcare = data.frame(hcs_healthcare, healthcare)
hcs_healthcare$Assessment.Date = mdy(hcs_healthcare$Assessment.Date)
hcs_healthcare = hcs_healthcare[order(hcs_healthcare$Client.ID, hcs_healthcare$Time.point, hcs_healthcare$Assessment.Date),]
describe.factor(hcs_healthcare$Time.point)
### Make numeric
hcs_healthcare$days_inpatient_psychiatric = as.numeric(hcs_healthcare$days_inpatient_psychiatric)

### Need to remove the duplicates start with removing the intake duplicates
hcs_healthcare_intake = subset(hcs_healthcare, Time.point == "Baseline Assessment")
### Create a client.id and time.point variable
hcs_healthcare_intake$client_id_time_point = paste0(hcs_healthcare_intake$Client.ID, hcs_healthcare_intake$Time.point)
hcs_healthcare_intake = distinct(hcs_healthcare_intake, client_id_time_point, .keep_all = TRUE)
hcs_healthcare_intake
```
Check out descriptives
```{r}
apply(hcs_healthcare_intake[,6:8], 2, function(x){describe.factor(x)})
```
Relationship between first intake and inpatient visit for medical, psychiatric, or ER visits  spearman correlation
```{r}

list_fun = data.frame(days_inpatient_medical = hcs_healthcare_intake$days_inpatient_medical, days_inpatient_psychiatric = hcs_healthcare_intake$days_inpatient_psychiatric, er_visits = hcs_healthcare_intake$er_visits)
list_output = list()

for(i in 1:length(list_fun)){
list_output[[i]] = cor.test(hcs_healthcare_intake$My.Score., list_fun[[i]], cor = "spearman", alternative = "less")
}
list_output
```

Let's look at the first baseline and first follow-up and see if there are differences in each of the three uses
```{r}
hcs_healthcare$client_id_time_point = paste0(hcs_healthcare$Client.ID, hcs_healthcare$Time.point)
hcs_healthcare = distinct(hcs_healthcare, client_id_time_point, .keep_all = TRUE)
hcs_healthcare
### Separate and get baseline and follow-ups that match
hcs_healthcare_intake= subset(hcs_healthcare, Time.point == "Baseline Assessment")
hcs_healthcare_follow_up = subset(hcs_healthcare, Time.point == "Follow up Assessment")

hcs_healthcare = merge(hcs_healthcare_intake, hcs_healthcare_follow_up, by = "Client.ID")
dim(hcs_healthcare)
hcs_healthcare = hcs_healthcare[order(hcs_healthcare$Client.ID),]
hcs_healthcare
### If the baseline date is after the follow-up date remove
hcs_healthcare$bad_date = ifelse(hcs_healthcare$Assessment.Date.x >= hcs_healthcare$Assessment.Date.y, 1, 0)
describe.factor(hcs_healthcare$bad_date)
hcs_healthcare = subset(hcs_healthcare, bad_date == 0)
hcs_healthcare
### Create BHC diff and ER diff scores
hcs_healthcare$bhcs_diff = hcs_healthcare$My.Score..y - hcs_healthcare$My.Score..x
hcs_healthcare$inpat_med_diff = hcs_healthcare$days_inpatient_medical.y - hcs_healthcare$days_inpatient_medical.x
hcs_healthcare$inpat_mental_diff = hcs_healthcare$days_inpatient_psychiatric.y - hcs_healthcare$days_inpatient_psychiatric.x
hcs_healthcare$er_diff = hcs_healthcare$er_visits.y - hcs_healthcare$er_visits.x
```
Quick look at descriptive
Just use complete data set easier
```{r}
miss_var_summary(hcs_healthcare)
hcs_healthcare = na.omit(hcs_healthcare)
n = dim(hcs_healthcare)[1]
n 
range(hcs_healthcare$Assessment.Date.x)
range(hcs_healthcare$Assessment.Date.y)
apply(hcs_healthcare[,20:22], 2, function(x){describe.factor(x)})
mean(hcs_healthcare$bhcs_diff)
sd(hcs_healthcare$bhcs_diff)
```
Look at correlations first then differences
```{r}

list_fun = data.frame(inpat_med_diff = hcs_healthcare$inpat_med_diff, inpat_mental_diff = hcs_healthcare$inpat_mental_diff, er_diff = hcs_healthcare$er_diff)
list_output = list()

for(i in 1:length(list_fun)){
list_output[[i]] = cor.test(hcs_healthcare$bhcs_diff, list_fun[[i]], cor = "spearman")
}
list_output
```
Ok now try putting together model for difference in health home model
Just sum the inpatient results together
```{r}
hcs_healthcare$inpat_all = hcs_healthcare$inpat_med_diff + hcs_healthcare$inpat_mental_diff
hcs_healthcare_ut = hcs_healthcare[c("er_diff", "inpat_all")]
summary(hcs_healthcare_ut)
er_cost = sum(hcs_healthcare$er_diff *5680.56)
hos_cost = sum(hcs_healthcare$inpat_all * 2534.62)
total_cost = sum(er_cost + hos_cost)
total_cost
```
Get the table
```{r}
library(dplyr)
tab_dat = matrix(c("ER", "hospital", "Total", 5680.56, 2534.62, "", sum(hcs_healthcare_ut$er_diff), sum(hcs_healthcare_ut$inpat_all), "", er_cost, hos_cost, total_cost), nrow = 3)
tab_dat = data.frame(tab_dat)
colnames(tab_dat) = c("measure", "savings_per_unit", "unit_difference", "cost_savings")
tab_dat
library(gt)
title_tab_dat = c(paste0("Cost saving from Healthlink data from 2019-01-07 to 2019-07-25", " ", "n","=", dim(hcs_healthcare_ut)[1]))
### Add title, change names of measure, make $, add footnote for part and full time cost savings, add footnote for average saving percentage to make it clear what the units are.
tab_dat$measure = recode(tab_dat$measure, "hospital" = "Hospital")
write.csv(tab_dat, "tab_dat.csv", row.names = FALSE)
tab_dat = read.csv("tab_dat.csv", header = TRUE)
tab_dat_table =  gt(tab_dat) %>%
  tab_header(title = title_tab_dat) %>%
  tab_footnote(footnote = "Unit is change in number of ER visits",  locations = cells_body(columns = vars(unit_difference), rows = 1)) %>%
  tab_footnote(footnote = "Unit is change in number of days",  locations = cells_body(columns = vars(unit_difference), rows = c(2))) %>%
  fmt_currency(columns = vars(savings_per_unit, cost_savings))%>%
  cols_label(measure = md("Measure"), savings_per_unit = md("Savings per unit"), unit_difference = md("Unit"), cost_savings = md("Cost savings"))
tab_dat_table
gtsave(tab_dat_table, "tab_dat_table.png")    
```
