---
title: "test"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

BAHCS-10 total scores 
Get Tobacco scores
Change tobacco scores
```{r}
setwd("T:/CRI_Research/telehealth_evaluation/CCHBC_big_picture/social_determinants_of_health_docs/Data")
bachs_10 = read.csv("Health Home - HCS - Qlikview.csv", header= TRUE)
bachs_10 = bachs_10[c("Universal.Client.ID", "HCS.Assessment.Date", "HCS.Total.Score", "Client.Model.Time.Point")]
tobacco = read.csv("Health Home - Tobacco - Qlikview.csv", header = TRUE)
tobacco = tobacco[c("Universal.Client.ID", "Tobacco.Screen.Date", "Client.Model.Time.Point", "Uses.Tobacco")]
tobacco$Uses.Tobacco = ifelse(tobacco$Uses.Tobacco == "Yes", 1, 0)

```
Identify and remove duplicates
Many cases of IDs and timepoints being the same; however, assessment dates are way different
Also, some cases of dates not aligning with their assessment date (i.e., 3-month happening a year after baseline / intake)
For the sake of simplicity, just take the first instance of each timepoint.  So create the ID with ID and timepoint.

```{r}
library(dplyr)
bachs_10$id_date = paste0(bachs_10$Universal.Client.ID, bachs_10$Client.Model.Time.Point)
# Order by ID and timepoint first and date first, to make sure you are grabing the first instance of each timepoint based on the date
bachs_10 = bachs_10[order(bachs_10$Universal.Client.ID, bachs_10$Client.Model.Time.Point, bachs_10$HCS.Assessment.Date),]

bachs_10 = distinct(bachs_10, id_date, .keep_all = TRUE)

tobacco$id_date = paste0(tobacco$Universal.Client.ID, tobacco$Client.Model.Time.Point)
# Order by ID and timepoint first and date first, to make sure you are grabing the first instance of each timepoint based on the date
tobacco = tobacco[order(tobacco$Universal.Client.ID, tobacco$Client.Model.Time.Point, tobacco$Tobacco.Screen.Date),]

tobacco = distinct(tobacco, id_date, .keep_all = TRUE)

```


Merge both data sets
Removing any BACHS-10 value below 10, because you cannot score below 10.
Go ahead and remove missing data, because there is only missing data two on the two variables so it is the same pairwise deletion.
Remove everything past 6-months that is enough time to see changes
```{r}
library(lubridate)
library(prettyR)
bachs_10_tob = merge(bachs_10, tobacco, by = "id_date")
dim(bachs_10_tob)
describe.factor(bachs_10_tob$HCS.Total.Score)
library(naniar)
miss_var_summary(bachs_10_tob)
bachs_10_tob_complete = na.omit(bachs_10_tob)
bachs_10_tob_complete$HCS.Assessment.Date = ymd(bachs_10_tob_complete$HCS.Assessment.Date)
bachs_10_tob_complete$Tobacco.Screen.Date = ymd(bachs_10_tob_complete$Tobacco.Screen.Date)
bachs_10_tob_complete$Universal.Client.ID.x = NULL
bachs_10_tob_complete$Universal.Client.ID.y = NULL
## Order by ID and HCS assessment date
bachs_10_tob_complete = bachs_10_tob_complete[order(bachs_10_tob_complete$id_date),]
bachs_10_tob_complete$Client.Model.Time.Point.y = NULL
names(bachs_10_tob_complete)[4] = "Client.Model.Time.Point"

bachs_10_tob_complete = subset(bachs_10_tob_complete, Client.Model.Time.Point == "Intake" | Client.Model.Time.Point == "3 Month" | Client.Model.Time.Point == "6 Month")
bachs_10_tob_complete
### Create a time variable
describe.factor(bachs_10_tob_complete$Client.Model.Time.Point)
bachs_10_tob_complete$time = ifelse(bachs_10_tob_complete$Client.Model.Time.Point == "Intake", 0, ifelse(bachs_10_tob_complete$Client.Model.Time.Point == "3 Month", 1, ifelse(bachs_10_tob_complete$Client.Model.Time.Point == "6 Month", 2, "Wrong")))
### Create intake only data set
bachs_10_tob_complete_intake = subset(bachs_10_tob_complete, Client.Model.Time.Point == "Intake")
```

Quick descirptives for intake
```{r}

describe.factor(bachs_10_tob_complete_intake$Uses.Tobacco)
dim(bachs_10_tob_complete_intake)[1]
mean(bachs_10_tob_complete_intake$HCS.Total.Score)
sd(bachs_10_tob_complete_intake$HCS.Total.Score)
library(descr)
compmeans(bachs_10_tob_complete_intake$HCS.Total.Score, bachs_10_tob_complete_intake$Uses.Tobacco)

```
Concurrent validity
```{r}
#Intake
hist(bachs_10_tob_complete_intake$HCS.Total.Score)
qqnorm(bachs_10_tob_complete_intake$HCS.Total.Score)
cor.test(bachs_10_tob_complete_intake$HCS.Total.Score, bachs_10_tob_complete_intake$Uses.Tobacco, alternative = "less")
```


Quick descirptives for all
```{r}
describe.factor(bachs_10_tob_complete$Uses.Tobacco)
dim(bachs_10_tob_complete)[1]
mean(bachs_10_tob_complete$HCS.Total.Score)
sd(bachs_10_tob_complete$HCS.Total.Score)
library(descr)
compmeans(bachs_10_tob_complete$HCS.Total.Score, bachs_10_tob_complete$Uses.Tobacco)
```


Logit regression to assess predictive validity with a one unit increase 
```{r}
library(rstanarm)
bayes_p_change_al_tob = stan_glm(Uses.Tobacco~ HCS.Total.Score*as.numeric(time), family = binomial(link = "logit"), data = bachs_10_tob_complete, seed = 123)
### You should not need to change this.  We want the mean, sd, 2.5, and 97.5
## check bayes_p_change_sat$stan_summary if you are unsure
bayes_p_change_al_tob_sum = round(bayes_p_change_al_tob$stan_summary[,c(1,3,4,10)],4)
## To get percentage change interpretation need to exp the parameter estimates
bayes_p_change_al_tob_sum = round(exp(bayes_p_change_al_tob_sum),3)
### Creates a percentage instead 1 + % 
bayes_p_change_al_tob_sum= bayes_p_change_al_tob_sum - 1
bayes_p_change_al_tob_sum
```
########################################
HCS and Healthcare utilization concurrent and predictive
#########################################

Data cleaning for healthcare utilization for concurrent and predictive
```{r}
setwd("T:/CRI_Research/telehealth_evaluation/CCHBC_big_picture/social_determinants_of_health_docs/Data")
hcs_healthcare = read.csv("Healthlink - HCS - Redcap.csv", header =TRUE)
#Client.ID, Record.ID, Assessment.Date, Time.point, My.Score
healthcare =  hcs_healthcare[,20:22]
names(healthcare) = c("days_inpatient_medical", "days_inpatient_psychiatric", "er_visits")
hcs_healthcare = hcs_healthcare[c("Client.ID", "Record.ID", "Assessment.Date", "Time.point", "My.Score.")]
hcs_healthcare = data.frame(hcs_healthcare, healthcare)
hcs_healthcare$Assessment.Date = mdy(hcs_healthcare$Assessment.Date)
hcs_healthcare = hcs_healthcare[order(hcs_healthcare$Client.ID, hcs_healthcare$Time.point, hcs_healthcare$Assessment.Date),]
describe.factor(hcs_healthcare$Time.point)
### Make numeric
hcs_healthcare$days_inpatient_psychiatric = as.numeric(hcs_healthcare$days_inpatient_psychiatric)
hcs_healthcare$hos_er = hcs_healthcare$days_inpatient_medical + hcs_healthcare$days_inpatient_psychiatric + hcs_healthcare$er_visits
hcs_healthcare
### Need to remove the duplicates start with removing the intake duplicates
hcs_healthcare_intake = subset(hcs_healthcare, Time.point == "Baseline Assessment")
### Create a client.id and time.point variable
hcs_healthcare_intake$client_id_time_point = paste0(hcs_healthcare_intake$Client.ID, hcs_healthcare_intake$Time.point)
hcs_healthcare_intake = distinct(hcs_healthcare_intake, client_id_time_point, .keep_all = TRUE)

```
Check out descriptives for intake
```{r}
dim(hcs_healthcare_intake)[1]
apply(hcs_healthcare_intake[,6:9], 2, function(x){describe.factor(x)})
```
Conncurrent validity with intake hcs and hos_er
```{r}
cor.test(hcs_healthcare_intake$My.Score., hcs_healthcare_intake$hos_er, correlation = "spearman", alterantive = "less")
```

Predictive validity data cleaning
```{r}
hcs_healthcare$client_id_time_point = paste0(hcs_healthcare$Client.ID, hcs_healthcare$Time.point)
hcs_healthcare = distinct(hcs_healthcare, client_id_time_point, .keep_all = TRUE)
hcs_healthcare
### Separate and get baseline and follow-ups that match
hcs_healthcare_intake= subset(hcs_healthcare, Time.point == "Baseline Assessment")
hcs_healthcare_follow_up = subset(hcs_healthcare, Time.point == "Follow up Assessment")

hcs_healthcare = merge(hcs_healthcare_intake, hcs_healthcare_follow_up, by = "Client.ID")
dim(hcs_healthcare)
hcs_healthcare = hcs_healthcare[order(hcs_healthcare$Client.ID),]
sum(duplicated(hcs_healthcare$Client.ID))
### If the baseline date is after the follow-up date remove
hcs_healthcare$bad_date = ifelse(hcs_healthcare$Assessment.Date.x >= hcs_healthcare$Assessment.Date.y, 1, 0)
describe.factor(hcs_healthcare$bad_date)
hcs_healthcare = subset(hcs_healthcare, bad_date == 0)
hcs_healthcare
### Create BHC diff and ER diff scores
hcs_healthcare$bhcs_diff = hcs_healthcare$My.Score..y - hcs_healthcare$My.Score..x

hcs_healthcare$hos_er_diff = (hcs_healthcare$days_inpatient_medical.y + hcs_healthcare$days_inpatient_psychiatric.y + hcs_healthcare$er_visits.y) - (hcs_healthcare$days_inpatient_medical.x + hcs_healthcare$days_inpatient_psychiatric.x + hcs_healthcare$er_visits.x)

```
Predictive validity: changes in HCS scores related to changes healthcare useage for matched first basline and first follow-up
Just use complete data set easier
```{r}
miss_var_summary(hcs_healthcare)
dim(hcs_healthcare)[1]
hcs_healthcare = na.omit(hcs_healthcare)
n = dim(hcs_healthcare)[1]
n 
range(hcs_healthcare$Assessment.Date.x)
range(hcs_healthcare$Assessment.Date.y)
apply(hcs_healthcare[,20:22], 2, function(x){describe.factor(x)})
mean(hcs_healthcare$bhcs_diff)
sd(hcs_healthcare$bhcs_diff)
```
Predictive for differences
```{r}
cor.test(hcs_healthcare$bhcs_diff, hcs_healthcare$hos_er_diff, method = "spearman", alternative = "less")

```
Let's try intake BHCS scores with changes in healthcare utilization
```{r}




```



####################################
Healthcare cost analysis health home
####################################
Just sum the inpatient results together
```{r}
hcs_healthcare$inpat_all = hcs_healthcare$inpat_med_diff + hcs_healthcare$inpat_mental_diff
hcs_healthcare_ut = hcs_healthcare[c("er_diff", "inpat_all")]
summary(hcs_healthcare_ut)
er_cost = sum(hcs_healthcare$er_diff *5680.56)
hos_cost = sum(hcs_healthcare$inpat_all * 2534.62)
total_cost = sum(er_cost + hos_cost)
total_cost
```
Table of results 
```{r}
library(dplyr)
tab_dat = matrix(c("ER", "hospital", "Total", 5680.56, 2534.62, "", sum(hcs_healthcare_ut$er_diff), 
                   sum(hcs_healthcare_ut$inpat_all), "", er_cost, hos_cost, total_cost), nrow = 3)
tab_dat = data.frame(tab_dat)
colnames(tab_dat) = c("measure", "savings_per_unit", "unit_difference", "cost_savings")
tab_dat
library(gt)
title_tab_dat = c(paste0("Cost saving from Healthlink data from 2019-01-07 to 2019-11-05", " ", "n","=", dim(hcs_healthcare_ut)[1]))
### Add title, change names of measure, make $, add footnote for part and full time cost savings, add footnote for average saving percentage to make it clear what the units are.
tab_dat$measure = recode(tab_dat$measure, "hospital" = "Hospital")
write.csv(tab_dat, "tab_dat.csv", row.names = FALSE)
tab_dat = read.csv("tab_dat.csv", header = TRUE)
tab_dat_table =  gt(tab_dat) %>%
  tab_header(title = title_tab_dat) %>%
  tab_footnote(footnote = "Unit is change in number of ER visits",  locations = cells_body(columns = vars(unit_difference), rows = 1)) %>%
  tab_footnote(footnote = "Unit is change in number of days",  locations = cells_body(columns = vars(unit_difference), rows = c(2))) %>%
  fmt_currency(columns = vars(savings_per_unit, cost_savings))%>%
  cols_label(measure = md("Measure"), savings_per_unit = md("Savings per unit"), unit_difference = md("Unit"), cost_savings = md("Cost savings"))
tab_dat_table
gtsave(tab_dat_table, "tab_dat_table.png")    
```





